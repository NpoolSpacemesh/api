syntax = "proto3";
package spacemesh;

message SimpleInt {
    uint64 value = 1;
}

message SimpleString {
    string value = 1;
}

// a non-negative coin amount
message Amount {
    uint64 value = 1;
}

message AccountId {
    bytes address = 1;
}

message Account {
    AccountId address = 1;  // account public address
    bytes public_key = 2;   // nice to include the account full public key
    uint64 counter = 3;     // aka nonce
    Amount balance = 4;     // known account balance
}

message AccountIdWithOffset {
    AccountId account_id = 1;
    uint64 offset = 2;
    uint64 items = 3;       // total number of client requested items
};

message SmesherIdWithOffset {
    SmesherId smesher_id = 1;
    uint64 offset = 2;
    uint64 items = 3;        // total number of client requested items
};


enum TransactionProcessingStatus {
    UNDEFINED = 0;
    REJECTED = 1;               // Rejected pre STF processing. e.g. bad data
    INSUFFICIENT_FUNDS = 2;     // Rejected pre STF processing by funds check
    CONFLICTING = 3;            // Rejected pre STF due to conflicting counter
    PENDING = 4;                // Pending processing by STF
    //PROCESSING = 5;
    //APPROVED = 6;
    ONMESH = 7;                 // processed. Processing results are in the tx receipt.
}

message TransactionProcessingData {
    TransactionProcessingStatus status = 1;
}

enum TransactionType {
    UNDEFINED = 0;
    COIN = 1;            // simple coin transaction
    ATX = 2;             // smesher activation transaction
    APP = 3;             // smart contract method
    DEPLOY = 4;          // deploy app from template
    DEPLOY_TEMPLATE = 5; // deploy app template code to mesh
}

enum TransactionResult { // results of processing a transaction by the STF
    RUNTIME_EXCEPTION = 0;              // app code exception
    INSUFFICIENT_GAS = 1;               // out of gas
    INSUFFICIENT_BALANCE = 2;           // failed due to sender insufficient funds
    EXECUTED = 3;                       // executed w/o error
    WRONG_NONCE = 4;                    // transaction counter mismatch
}

message Transactions {
    uint64 total_items = 1; // total server available items. Used to query with new offset
    repeated Transaction transactions = 2;
}

message TransactionReceipt {
    TransactionId id = 1;  // the source transaction
    TransactionResult result = 2;   // tx processing result
    uint64 gas_used = 3;            // gas units used by the transaction (gas price in tx)
    Amount fee = 4;                 // transaction fee charged for the transaction
    LayerId layer_number = 5;       // The layer in which the STF processed this transcation
}

message TransactionId {
    bytes id = 1;
}

message SmesherId {
    bytes id = 1;
}

message TransactionFee { // = gas * gas_price
    uint64 gas_consumed = 1;
    uint64 gas_price = 2;
}

// Simple coin transaction
message Transaction {
    TransactionType type = 1;
    TransactionId id = 2; // hash
    AccountId sender = 3;
    TransactionFee fee = 4;
    uint64 timestamp = 5;  // shouldn't this be part of the event envelope?
    AccountId receiver = 6; // depending on tx type
    Amount amount = 7; // amount of coin transfered in this tx by sender
    TransactionProcessingStatus status = 8;
    uint64 counter = 9;    // tx counter aka nonce

    bytes data = 10; // binary payload - used for app, deploy, atx and spwan transactions
    SmesherId smesher_id = 11;    // used in atx only
    TransactionId prev_atx = 12;  // previous ATX. used in atx.
}

message Reward {
    uint64 layer = 1;
    Amount total = 2;
    Amount layer_reward = 3;
    uint64 layer_computed = 4; // layer number of the layer when reward was computed
    // tx_fee = total- layer_reward
    AccountId coinbase = 5; // account awarded this reward
    SmesherId smesher = 6;  // it will be nice to always have this in reward events
}

message Rewards {
    uint64 total_items = 1; // total server available items. Used to query with new offset
    repeated Reward rewards = 2;
}

message Block {
    bytes id = 1;                           // block hash
    repeated Transaction transactions = 2;
}

enum LayerStatus {
    UNKNOWN = 0;
    APPROVED = 1;
    CONFIRMED = 2;
}

message Layer {
    uint64 number = 1;              // layer number - not hash - layer content may change
    LayerStatus status = 2;
    bytes hash = 3;                 // computer layer hash - do we need this?
    repeated Block blocks = 4;      // layer's blocks
    bytes root_state_hash = 5;      // when available - the root state hash of global state in this layer
}

message NodeStatus {
    uint64 known_peers = 1;
    uint64 min_peers = 2;
    uint64 max_peers = 3;
    bool   is_synced = 4;
    uint64 synced_layer = 5;
    uint64 current_layer = 6;
    uint64 verified_layer = 7;
}

message AppEvent {                     // an event emitted from an app instance
    TransactionId transaction_id = 1;  // the transaction that called the code
    string message = 2;                // the event's string emitted from code
}

/*
   Represents a critical node error.
   TODO: add an enum with clearly-defined error types.
 */

enum NodeErrorType {
    UNDEFINED = 0;
    PANIC_UNSPECIFIED = 1;
    PANIC_SYNC = 2;
    SIGNAL_SHUT_DOWN = 3;
}

message NodeError {
    NodeErrorType type = 1;
    string message = 2;
    string stack_trace = 3;
}

message NodeSyncStatus {
  enum NodeSyncStatus {
      UNDEFINED = 0;
      NEW_LAYER_VERIFIED = 1;
      NEW_TOP_LAYER = 2;
      SYNCED = 3;
      SYNCING = 4;
      NOT_SYNCED = 5;
  }
}
