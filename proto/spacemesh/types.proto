syntax = "proto3";
package spacemesh;

message SimpleInt {
    uint64 value = 1;
}

message SimpleString {
    string value = 1;
}

// a non-negative coin amount
message Amount {
    uint64 value = 1;
}

message AccountId {
    bytes address = 1;
}

message Account {
    AccountId address = 1;
    uint64 counter = 2; // aka nonce
    Amount balance = 3;
}

enum TransactionStatus {
    UNDEFINED = 0;
    REJECTED = 1;
    //INSUFFICIENT_FUNDS = 2;
    //CONFLICTING = 3;
    PENDING = 4;
    //PROCESSING = 5;
    //APPROVED = 6;
    CONFIRMED = 7;
}

enum TransactionType {
    COIN = 0;            // simple coin transaction
    ATX = 1;             // smesher activation transaction
    APP = 2;             // smart contract method
    DEPLOY = 3;          // deploy app from templlate
    DEPLOY_TEMPLATE = 4; // deploy app template code to mesh
}

enum TransactionResult {
    RUNTIME_EXCEPTION = 0;
    INSUFFICIENT_GAS_PROVIDED = 1;
    INVALID_DATA = 2;
}

message TransactionReceipt {
    TransactionId transaction_id = 1;  // the source transaction
    TransactionResult result = 2;   // tx processing result
    uint64 gas_used = 3;            // gas units used by the transaction
    Amount fee = 4;                 // transaction fee charged for the transaction
}

message AppEvent {                     // an event emitted from an app instance
    TransactionId transaction_id = 1;  // the transaction that called the code
    string message = 2;                // the event's string emitted from code
}

message TransactionId {
    bytes id = 1;
}

message SmesherId {
    bytes id = 1;
}

message TransactionFee { // = gas * gas_price
    uint64 gas = 1;
    uint64 gas_price = 2;
}

// Simple coin transaction
message Transaction {
    TransactionType type = 1;
    TransactionId id = 2;
    AccountId sender = 3;
    TransactionFee fee = 4;
    uint64 timestamp = 5;  // shouldn't this be part of the event envelope?
    uint64 layer_id = 6;
    AccountId receiver = 7; // depending on tx type
    Amount amount = 8; // amount of coin transfered in this tx by sender
    TransactionStatus status = 9;

    bytes data = 10; // binary payload - used for app, deploy, atx and spwan transactions
    SmesherId smesher_id = 11;    // used in atx only
    TransactionId prev_atx = 12;  // previous ATX. used in atx.
}

message Reward {
    uint64 layer_number = 1;
    uint64 total_reward = 2;
    uint64 layer_reward = 3;
    // tx_fee = total_reward - layer_reward
    AccountId coinbase = 4;
    SmesherId smesher = 5; // it will be nice to always have this in reward events
}

message Block {
    bytes id = 1;                           // basically transactions hash
    repeated Transaction transactions = 2;
}

enum LayerStatus {
    UNKNOWN = 0;
    APPROVED = 1;
    CONFIRMED = 2;
}

message Layer {
    uint64 number = 1;              // layer number - not hash - layer content may change
    LayerStatus status = 2;
    bytes hash = 3;                 // computer layer hash - do we need this?
    repeated Block blocks = 4;
    bytes root_state_hash = 5;      // when computed
}

message NodeStatus {
    uint64 known_peers = 1;
    uint64 min_peers = 2;
    uint64 max_peers = 3;
    bool   is_synced = 4;
    uint64 synced_layer = 5;
    uint64 current_layer = 6;
    uint64 verified_layer = 7;
}

/*
   Represents a critical node error.
   TODO: add an enum with clearly-defined error types.
 */

enum ErrorType {
    UNKNOWN_PANIC = 0;
    SYNC_PANIC = 1;
    SHUT_DOWN = 2;
}

message NodeError {
    ErrorType type = 1;
    string message = 2;
    string stack_trace = 3;
}

message SyncStatus {
  enum SyncStatus {
      UNDEFINED = 0;
      NEW_LAYER_VERIFIED = 1;
      NEW_TOP_LAYER = 2;
      SYNCED = 3;
      SYNCING = 4;
      NOT_SYNCED = 5;
  }
}
