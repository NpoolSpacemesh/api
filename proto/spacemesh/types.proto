syntax = "proto3";
package spacemesh;

message SimpleInt {
    uint64 value = 1;
}

message SimpleString {
    string value = 1;
}

// a non-negative coin amount
message Amount {
    uint64 value = 1;
}

message AccountId {
    bytes address = 1;
}

message Account {
    AccountId address = 1;  // account public address
    bytes public_key = 2;   // nice to include the account full public key
    uint64 counter = 3;     // aka nonce
    Amount balance = 4;     // known account balance
}

message AccountIdWithOffset {
    AccountId account_id = 1;
    uint64 offset = 2;
    uint64 items = 3;       // total number of client requested items
};

message SmesherIdWithOffset {
    SmesherId smesher_id = 1;
    uint64 offset = 2;
    uint64 items = 3;        // total number of client requested items
};

message GlobalState {
    bytes root_hash = 1;
    uint64 layer_number = 2;
}

message TransactionStateData {
    enum TransactionState {
        UNDEFINED = 0;
        UNKNOWN = 1;                // Default state
        REJECTED = 2;               // Rejected pre STF processing. e.g. bad data
        INSUFFICIENT_FUNDS = 3;     // Rejected pre STF processing by funds check
        CONFLICTING = 4;            // Rejected pre STF due to conflicting counter
        PENDING = 5;                // Got to a block on the mesh. Pending processing by STF
        PROCESSED = 6;              // Process by th STF. Processing results are in the tx receipt
    }
}

enum TransactionType {
    SIMPLE = 0;            // simple coin transaction
    ATX = 1;             // smesher activation transaction
    APP = 2;             // smart contract method execution
    SPAWN_APP = 3;          // deploy app from template
    DEPLOY_TEMPLATE = 4; // deploy app template code to mesh
}

// The results of STF transaction processing
enum TransactionResult {
    UNKNOWN = 0;                        // Not yet known
    EXECUTED = 1;                       // executed w/o error by the STF
    BAD_COUNTER = 2;                    // unexpected transaction counter
    RUNTIME_EXCEPTION = 3;              // app code exception
    INSUFFICIENT_GAS = 4;               // out of gas
    INSUFFICIENT_FUNDS = 5;             // failed due to sender's insufficient funds
}

message Transactions {
    uint64 total_items = 1; // total server available items. Used to query with new offset
    repeated Transaction transactions = 2;
}

message TransactionReceipt {
    TransactionId id = 1;           // the source transaction
    TransactionResult result = 2;   // tx processing result
    uint64 gas_used = 3;            // gas units used by the transaction (gas price in tx)
    Amount fee = 4;                 // transaction fee charged for the transaction
    uint64 layer_number = 5;        // The layer in which the STF processed this transaction
    AccountId app_address = 6;      // Deployed app address or code template address !!!
}

message TransactionReceipts {
    uint64 total_items = 1; // total server available items. Used to query with new offset
    repeated TransactionReceipt receipts = 2;
}

message TransactionId {
    bytes id = 1;
}

message SmesherId {
    bytes id = 1;
}

message TransactionFee { // = gas * gas_price
    uint64 gas_consumed = 1;
    uint64 gas_price = 2;
}

// Simple coin transaction
// This filed are the immutable signed tx data which is part of the signed transaction body and do not include
// any transaction processing or state which is mutable.
message Transaction {
    TransactionType type = 1;
    TransactionId id = 2; // hash
    AccountId sender = 3;
    TransactionFee fee = 4;
    uint64 timestamp = 5;  // shouldn't this be part of the event envelope?
    AccountId receiver = 6; // depending on tx type
    Amount amount = 7; // amount of coin transfered in this tx by sender
    uint64 counter = 8;    // tx counter aka nonce
    bytes data = 9; // binary payload - used for app, deploy, atx and spwan transactions
    SmesherId smesher_id = 10;    // used in atx only
    TransactionId prev_atx = 11;  // previous ATX. used in atx.
}

message Reward {
    uint64 layer = 1;
    Amount total = 2;
    Amount layer_reward = 3;
    uint64 layer_computed = 4; // layer number of the layer when reward was computed
    // tx_fee = total- layer_reward
    AccountId coinbase = 5; // account awarded this reward
    SmesherId smesher = 6;  // it will be nice to always have this in reward events
}

message Rewards {
    uint64 total_items = 1; // total server available items. Used to query with new offset
    repeated Reward rewards = 2;
}

message Block {
    bytes id = 1;                           // block hash
    repeated Transaction transactions = 2;
}

enum LayerStatus {
    UNDEFINED = 0;
    UNKNOWN = 1;
    APPROVED = 2;
    CONFIRMED = 3;
}

message Layer {
    uint64 number = 1;              // layer number - not hash - layer content may change
    LayerStatus status = 2;
    bytes hash = 3;                 // computer layer hash - do we need this?
    repeated Block blocks = 4;      // layer's blocks
    bytes root_state_hash = 5;      // when available - the root state hash of global state in this layer
}

message NodeStatus {
    uint64 known_peers = 1;
    uint64 min_peers = 2;
    uint64 max_peers = 3;
    bool   is_synced = 4;
    uint64 synced_layer = 5;          // the last layer node has synced
    uint64 top_layer = 6;             // top layer is the tip
    uint64 verified_layer = 7;        // the last layer node has verified
}

message AppEvent {                     // an event emitted from an app instance
    TransactionId transaction_id = 1;  // the transaction that called the code
    string message = 2;                // the event's string emitted from code
}

/*
   Represents a critical node error.
   TODO: add an enum with clearly-defined error types.
 */

message NodeError {
    enum NodeErrorType {
        UNDEFINED = 0;
        PANIC_UNSPECIFIED = 1;
        PANIC_SYNC = 2;
        SIGNAL_SHUT_DOWN = 3;
    }
    string message = 2;
    string stack_trace = 3;
}

message NodeSyncStatus {
  enum NodeSyncStatus {
      NEW_LAYER_VERIFIED = 0;   // a new layer was verified event
      NEW_TOP_LAYER = 1;        // new top layer started
      SYNCED = 2;               // node synced event
      SYNCING = 3;              // node is syncing event (but not sycned)
  }
}
