syntax = "proto3";
package spacemesh;

message SimpleInt {
    uint64 value = 1;
}

// a simple, extensible return type that encapsulates both error and success.
// may be extended in future to add more data, e.g., specific error types.
message TypedResult {
    bool value = 1;
    string msg = 2;
}

message SimpleString {
    string value = 1;
}

// a non-negative coin amount
message Amount {
    uint64 value = 1;
}

message AccountId {
    bytes address = 1;
}

message Account {
    AccountId address = 1;  // account public address
    uint64 counter = 2;     // aka nonce
    Amount balance = 3;     // known account balance
}

message AccountIdWithOffset {
    AccountId account_id = 1;
    uint64 offset = 2;
    uint64 items = 3;       // total number of client requested items
};

message SmesherIdWithOffset {
    SmesherId smesher_id = 1;
    uint64 offset = 2;
    uint64 items = 3;        // total number of client requested items
};

message GlobalState {
    bytes root_hash = 1;
    uint64 layer_number = 2;
}

message TransactionId {
    bytes id = 1;
}

message SmesherId {
    bytes id = 1;
}

message TransactionFee {
    uint64 gas_consumed = 1;
    uint64 gas_price = 2;
    // tx_fee = gas_consumed * gas_price
}

message TransactionReceipt {
    TransactionId id = 1;           // the source transaction
    // The results of STF transaction processing
    enum TransactionResult {
        UNDEFINED = 0;
        UNKNOWN = 1;                // Not yet known
        EXECUTED = 2;               // executed w/o error by the STF
        BAD_COUNTER = 3;            // unexpected transaction counter
        RUNTIME_EXCEPTION = 4;      // app code exception
        INSUFFICIENT_GAS = 5;       // out of gas
        INSUFFICIENT_FUNDS = 6;     // failed due to sender's insufficient funds
    }
    TransactionResult result = 2;   // tx processing result
    uint64 gas_used = 3;            // gas units used by the transaction (gas price in tx)
    Amount fee = 4;                 // transaction fee charged for the transaction
    uint64 layer_number = 5;        // The layer in which the STF processed this transaction
    AccountId app_address = 6;      // Deployed app address or code template address
}

message TransactionReceipts {
    uint64 total_items = 1; // total server available items. Used to query with new offset
    repeated TransactionReceipt receipts = 2;
}

// TransactionState is the "journey" of a tx from newly-submitted, to being
// rejected from or accepted into the mempool, to being included in the mesh (in a
// block), to (finally) being processed by the STF. It tells us nothing about the
// result of the processing.
message TransactionState {
    TransactionId id = 1;
    enum TransactionStateType {
        UNDEFINED = 0;              // Default state
        REJECTED = 1;               // Rejected pre STF processing due to, e.g., bad data
        INSUFFICIENT_FUNDS = 2;     // Rejected pre STF processing by funds check
        CONFLICTING = 3;            // Rejected pre STF due to conflicting counter
        PENDING = 4;                // Included in a block on the mesh. Pending processing by STF
        PROCESSED = 5;              // Processed by the STF. Processing results are in the tx receipt
    }
    TransactionStateType state = 2;
}

<<<<<<< HEAD
// Data specific to an activation transaction.
message ActivationTransactionData {
    SmesherId smesher_id = 1;    // ID of smesher who created the ATX
    TransactionId prev_atx = 2;  // previous ATX pointed to
    uint64 commitment_size = 3;  // commitment size in bytes
}

// Data specific to a simple coin transaction.
message CoinTransactionData {
    AccountId receiver = 1;
}

message SmartContractTransactionData {
    enum TransactionType {
        APP = 0;              // smart contract method
        SPAWN_APP = 1;        // deploy app from template using svm terminology
        DEPLOY_TEMPLATE = 2;  // deploy app template code to mesh
    }
    TransactionType type = 1;
    bytes data = 2;           // packed binary arguments, including ABI selector
    AccountId address = 3;    // address of smart contract or template
}

// A simple signature data
message Signature {
    enum Scheme {
        ED25519 = 0;            // Standard Ed25519 scheme
        ED25519_PLUS_PLUS = 1;  // Spacemesh-modified ED25519 scheme, a.k.a. ED25519++
    }
    Scheme scheme = 1;    // The signature's scheme
    bytes signature = 2;  // The signature itself
    bytes public_key = 3; // Included in schemes which require signer to provide a public key
=======
// An activation transaction, a subtype of transaction
message Atx {
    SmesherId smesher_id = 1; // Smesher ID
    TransactionId prev_atx = 2; // previous ATX
    uint64 atx_commitment_size = 3; // commitment size
>>>>>>> 9bad756ca9248d64e6ed84dcc6c88412ecc59ef4
}

// An immutable Spacemesh transaction.
// do not include mutable data such as tx state or result.
message Transaction {
    TransactionId id = 1;
    oneof data {
        ActivationTransactionData activation_data = 2;
        CoinTransactionData coin_transfer_data = 3;
        SmartContractTransactionData smart_contract_data = 4;
    }
<<<<<<< HEAD
    AccountId sender = 5;     // tx originator, should match signer inside Signature
    TransactionFee fee = 6;   // fee paid, in smidge
    uint64 timestamp = 7;     // shouldn't this be part of the event envelope?
    Amount amount = 8;        // amount of coin transfered in this tx by sender
    uint64 counter = 9;       // tx counter aka nonce
    Signature signature = 10; // sender signature on transaction
=======
    TransactionType type = 1;
    TransactionId id = 2; // hash
    AccountId sender = 3;
    TransactionFee fee = 4;
    uint64 timestamp = 5; // shouldn't this be part of the event envelope?
    AccountId receiver = 6; // depending on tx type
    Amount amount = 7; // amount of coin transfered in this tx by sender
    uint64 counter = 8; // tx counter aka nonce
    bytes data = 9; // binary payload - used for app, deploy, atx and spwan transactions
    Atx atx_data = 10; // ATX-related fields, used for ATX only
>>>>>>> 9bad756ca9248d64e6ed84dcc6c88412ecc59ef4
}

message Transactions {
    uint64 total_items = 1; // total server available items. Used to query with new offset
    repeated Transaction transactions = 2;
}

message Reward {
    uint64 layer = 1; // layer award was paid in
    Amount total = 2; // total reward paid (sum of tx fee and layer reward)
    Amount layer_reward = 3;
    uint64 layer_computed = 4; // layer number of the layer when reward was computed
    // tx_fee = total - layer_reward
    AccountId coinbase = 5; // account awarded this reward
    SmesherId smesher = 6;  // ID of smesher who earned this reward
}

message Rewards {
    uint64 total_items = 1; // total server available items. Used to query with new offset
    repeated Reward rewards = 2;
}

message Block {
    bytes id = 1; // block hash
    repeated Transaction transactions = 2;
}

message Layer {
    enum LayerStatus {
        UNDEFINED = 0;
        APPROVED = 1;
        CONFIRMED = 2;
    }
    uint64 number = 1;  // layer number - not hash - layer content may change
    LayerStatus status = 2;
    bytes hash = 3;                 // computer layer hash - do we need this?
    repeated Block blocks = 4;      // layer's blocks
    bytes root_state_hash = 5;      // when available - the root state hash of global state in this layer
}

// current node status
message NodeStatus {
    uint64 connected_peers = 1;       // number of connected neighbors
    bool   is_synced = 2;             // Is meshed synced
    uint64 synced_layer = 3;          // the last layer node has synced
    uint64 top_layer = 4;             // top layer is the tip
    uint64 verified_layer = 5;        // the last layer node has verified
}

// Indicates a change in node status
message NodeStatusEvent {
    enum NodeStatusEvent {
      UNDEFINED = 0;
      SYNCED = 1;                // node is synced
      SYNCING = 2;               // node is syncing (but not synced)
      NOT_SYNCING = 3;           // sync did not start
      SYNC_FAILED = 4;           // node sync fail event. Node will never be syncing or synced again in this session
      NEIGHBOR_CONNECTED = 5;    // Connected to a neighbor
      NEIGHBOR_DISCONNECTED = 6; // Disconnected from a neighbor
    }
    NodeStatusEvent status = 1;
}

message AppEvent {                     // an event emitted from an app instance
    TransactionId transaction_id = 1;  // the transaction that called the code
    string message = 2;                // the event's string emitted from code
}


// Represents a critical node error.
message NodeError {
    enum NodeErrorType {
        UNDEFINED = 0;
        PANIC_UNSPECIFIED = 1; // general panic
        PANIC_SYNC = 2; // panic while trying to sync in the sync module
        SIGNAL_SHUT_DOWN = 3; // received a shut down signal
        PANIC_P2P = 4; // p2p module panic
        PANIC_HARE = 5; // hare protocol panic
    }
    NodeErrorType error_type = 1;
    string message = 2;
    string stack_trace = 3;
}
