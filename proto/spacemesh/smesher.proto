syntax = "proto3";
package spacemesh;
import "google/protobuf/empty.proto";
import "spacemesh/types.proto";
import "spacemesh/smesher_types.proto";

// Readonly basic node data
service SmesherService {

    /////// Smeshing (mining) management

    // Returns true iff node is currently smeshing
    rpc IsSmeshing(google.protobuf.Empty) returns (TypedResult);

    // Start smeshing. Will return false if post data is incomplete or missing
    rpc StartSmeshing(google.protobuf.Empty) returns (TypedResult);

    // Stop smeshing and optionally attempt to delete post init file(s)
    // Returns true if request is accepted by node, false if it fails
    rpc StopSmeshing(DeletePostData) returns (TypedResult);

    // Get the current smesher id generated by the node
    rpc SmesherId(google.protobuf.Empty) returns (AccountId);

    // Get the current coinbase
    rpc Coinbase(google.protobuf.Empty) returns (AccountId);

    // Set the coinbase.
    // Returns true if request succeeds, false if it fails.
    rpc SetCoinbase(AccountId) returns (TypedResult);

    // Get the current min gas for including txs in blocks by this smesher
    rpc MinGas(google.protobuf.Empty) returns (SimpleInt);

    // Set a min gas units for including txs in blocks by this smesher
    // Returns true if request succeeds, false if it fails.
    rpc SetMinGas(SimpleInt) returns (TypedResult);

    /////// Proofs of space data files management

    // Returns post data status from the node
    rpc PostData(google.protobuf.Empty) returns (PostStatus);

    // Returns a bit field of all available setup compute engines
    rpc AvailableComputeEngines(google.protobuf.Empty) returns (ComputeEngineFlags);

    // Starts (or continues) a post init phase. Supports resuming a previously
    // started init session.
    // Returns true if request is accepted by node, false if it fails
    rpc CreatePostData(PostData) returns (TypedResult);

    // Stop an ongoing post data init phase and optionally attempt to delete
    // the post data file(s)
    // Returns true if request is accepted by node, false if it fails
    rpc StopPostDataCreationSession(DeletePostData) returns (TypedResult);

    // Returns a stream of updates to post data file(s) during the init phase
    rpc PostDataCreationProgressStream(google.protobuf.Empty) returns (stream PostStatus);

}
