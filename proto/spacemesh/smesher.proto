syntax = "proto3";
package spacemesh;
import "google/protobuf/empty.proto";
import "spacemesh/types.proto";
import "spacemesh/smesher_types.proto";

// Readonly basic node data
service SmesherService {

    /////// Smeshing (mining) management

    // Returns true iff node is currently smeshing
    rpc IsSmeshing(google.protobuf.Empty) returns (BoolResult);

    // Start smeshing. Will return false if commitment is incomplete or missing.
    rpc StartSmeshing(google.protobuf.Empty) returns (BoolResult);

    // Stop smeshing and optionally attempt to delete post init file(s)
    rpc StopSmeshing(DeleteCommitment) returns (BoolResult);

    // Get the current smesher id generated by the node
    rpc SmesherId(google.protobuf.Empty) returns (AccountId);

    // Coinbase commands
    rpc Coinbase(google.protobuf.Empty) returns (AccountId);
    rpc SetCoinbase(AccountId) returns (BoolResult);

    // Get the current min gas for including txs in blocks by this smesher
    rpc MinGas(google.protobuf.Empty) returns (SimpleInt);

    // Set a min gas units for including txs in blocks by this smesher
    rpc SetMinGas(SimpleInt) returns (BoolResult);

    /////// PoSpace commitments management

    // Returns post commitment data from the node
    rpc CommitmentData(google.protobuf.Empty) returns (CommitmentData);

    // Returns a list of available commitment init processors (including CPU as fallback)
<<<<<<< HEAD
    rpc CommitmentProcessor(google.protobuf.Empty) returns (CommitmentProcessors);
=======
    rpc CommitmentProcessors(google.protobuf.Empty) returns (CommitmentProcessors);
>>>>>>> 4793ab1290c3ea4a9c99be85456f06cf0086c3f4

    // Starts (or continues) a commitment init phase. Supports appending to file from a previous incomplete init phase.
    rpc CreateCommitment(CommitmentUserData) returns (BoolResult);

    // Stop an ongoing commitment init phase and optionally attempt to delete commitment file(s)
    rpc StopCommitmentCreation(DeleteCommitment) returns (BoolResult);

    // Retruns a stream of updates to a post commitment during the init phase
    rpc CommitmentProgressStream(google.protobuf.Empty) returns (CommitmentData);

}
