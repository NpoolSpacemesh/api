syntax = "proto3";
package spacemesh;
import "google/protobuf/empty.proto";

message SimpleMessage {
    string value = 1;
}

message SimpleInt {
    uint64 value = 1;
}

message Amount { // a smidge non-negative coin amount
    uint64 value = 1;
}

message AccountId {
    bytes address = 1;
}

enum TransactionStatus {
    UNDEFINED = 0;
    REJECTED = 1;
    //INSUFFICIENT_FUNDS = 2;
    //CONFLICTING = 3;
    PENDING = 4;
    //PROCESSING = 5;
    //APPROVED = 6;
    CONFIRMED = 7;
}

enum TransactionType {
    COIN = 0;            // simple coin transaction
    ATX = 1;             // smesher activation transaction
    APP = 2;             // smart contract method
    DEPLOY = 3;          // deploy app from templlate
    DEPLOY_TEMPLATE = 4; // deploy app template code to mesh
}

message TransactionConfirmation { ?????
    string value = 1;
    string id = 2;
}

message TransactionId {
    bytes id = 1;
}

message SmesherId {
    bytes id = 1;
}

message TransactionFee { // = gas * gas_price
    uint64 gas = 1;
    uint64 gas_price = 2;
}

// common fields to all transactions. Allows demuxing of message to
// specific transaction type messages. e.g. CoinTransaction
message Transaction {
    TransactionType type = 1;
    TransactionId id = 2;
    AccountId sender = 3;
}

message CoinTransaction {
    TransactionType type = 1;
    TransactionId id = 2;
    AccountId sender = 3;
    AccountId receiver = 4;
    Amount amount = 5;
    TransactionFee fee = 6;
    TransactionStatus status = 7;
    uint64 layer_id = 8;
    uint64 timestamp = 9; // what does this time mean?
}

message AppTransaction {
    TransactionType type = 1;
    TransactionId id = 2;
    AccountId sender = 3;
    AccountId app_id = 4;
    Amount amount = 5;
    TransactionFee fee = 6;
    TransactionStatus status = 7;
    uint64 layer_id = 8;
    uint64 timestamp = 9; // what does this time mean?
    bytes meta_data = 10;
}

message DeployAppTransaction {
    TransactionType type = 1;
    TransactionId id = 2;
    AccountId sender = 3;
    AccountId app_template_id = 4;
    Amount amount = 5;
    TransactionFee fee = 6;
    TransactionStatus status = 7;
    uint64 layer_id = 8;
    uint64 timestamp = 9; // what does this time mean?
    bytes meta_data = 10;
}

message ActivationTransaction {
    TransactionType type = 1;
    TransactionId id = 2;
    AccountId sender = 3;
    bytes atx_data = 4;
    TransactionId prev_atx_id = 5;
    SmesherId smesher_id = 6;
    AccountId coinbase = 7;
    TransactionFee fee = 8;
    TransactionStatus status = 9;
    uint64 layer_id = 10;
    uint64 timestamp = 11; // what does this time mean?
}

message Reward {
    uint64 layer = 1;
    uint64 total_reward = 2;
    uint64 layer_reward = 3;
    // tx_fee = total_reward - layer_reward
    AccountId coinbase = 4;
    SmesherId smesher = 5; // it will be nice to always have this in reward events
}

message Block {
    bytes id = 1;
    repeated Transaction transactions = 2;
}

message LayerId {
    bytes id = 1;
}

message Layer {
    LayerId id = 1;
    repeated Block blocks = 2;
}

enum LayerStatus {
    UNKNOWN = 0;
    APPROVED = 1;
    CONFIRMED = 2;
    REJECTED = 3;
}

message LayerEvent {
    Id layer_id = 1;
    LayerStatus status = 2;
}

enum AccountEvent {
    UNKNOWN = 0;
    BALANCE_CHANGE = 1;
    NONCE_CHANGE = 2;
}
message AccountEvent {
    AccountEvent events = 1;
    Account account = 2;
}

message NodeStatus {
    uint64 peers = 1;
    uint64 min_peers = 2;
    uint64 max_peers = 3;
    bool synced = 4;
    uint64 synced_layer = 5;
    uint64 current_layer = 6;
    uint64 verified_layer = 7;
}

/*
   Represents a critical node error.
   TODO: add an enum with clearly-defined error types.
 */
message NodeError {
    string error = 1;
}

message SyncStatus {
  enum SyncStatus {
      UNDEFINED = 0;
      NEW_LAYER_VERIFIED = 1;
      NEW_TOP_LAYER = 2;
      SYNCED = 3;
      SYNCING = 4;
      NOT_SYNCED = 5;
  }
}

service SpacemeshService {
    // SCALAR

    // Test facade

    // A simple test endpoint
    rpc Echo(SimpleMessage) returns (SimpleMessage);

    // Node facade

    // Returns the version of the node software as a semver string
    rpc NodeVersion(google.protobuf.Empty) returns (SimpleMessage);
    // Returns node status object
    rpc NodeStatus(google.protobuf.Empty) returns (NodeStatus);
    // Tell the node to start sync
    rpc NodeSyncStart(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Mesh facade

    // Returns mesh genesis time (as UTC string)
    rpc MeshGenesisTime(google.protobuf.Empty) returns (SimpleMessage);
    // Returns current layer
    rpc MeshCurrentLayer(google.protobuf.Empty) returns (SimpleInt);
    // Returns current epoch
    rpc MeshCurrentEpoch(google.protobuf.Empty) returns (SimpleInt);
    // Returns network ID
    rpc MeshNetId(google.protobuf.Empty) returns (SimpleInt);
    // Returns number of layers per epoch
    rpc MeshEpochNumLayers(google.protobuf.Empty) returns (SimpleInt);

    // STREAM

    // Node stream facade

    // Sync status events
    rpc NodeStreamSyncStatus(google.protobuf.Empty) returns (stream SyncStatus);
    // Node error events
    rpc NodeStreamError(google.protobuf.Empty) returns (stream NodeError);

    // Mesh stream facade

    // Account events
    rpc MeshStreamAccount(google.protobuf.Empty) returns (stream AccountEvent);
    // Reward events
    rpc MeshStreamReward(google.protobuf.Empty) returns (stream Reward);
    // Layer events
    rpc MeshStreamLayer(google.protobuf.Empty) returns (stream Layer);
    // Layer state change events
    rpc MeshStreamLayerState(google.protobuf.Empty) returns (stream SimpleInt);
}
