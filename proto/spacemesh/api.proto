syntax = "proto3";
package spacemesh;
import "google/protobuf/empty.proto";
import "spacemesh/types.proto";

service SpacemeshService {
    // SCALAR

    // Test facade

    // A simple test endpoint
    rpc Echo(SimpleMessage) returns (SimpleMessage);

    // Node facade

    // Returns the version of the node software as a semver string
    rpc NodeVersion(google.protobuf.Empty) returns (SimpleMessage);
    // Returns node status object
    rpc NodeStatus(google.protobuf.Empty) returns (NodeStatus);
    // Tell the node to start sync
    rpc NodeSyncStart(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Mesh facade

    // Returns mesh genesis time (as UTC string)
    rpc MeshGenesisTime(google.protobuf.Empty) returns (SimpleMessage);
    // Returns current layer
    rpc MeshCurrentLayer(google.protobuf.Empty) returns (SimpleInt);
    // Returns current epoch
    rpc MeshCurrentEpoch(google.protobuf.Empty) returns (SimpleInt);
    // Returns network ID
    rpc MeshNetId(google.protobuf.Empty) returns (SimpleInt);
    // Returns number of layers per epoch
    rpc MeshEpochNumLayers(google.protobuf.Empty) returns (SimpleInt);

    // STREAM

    // Node stream facade

    // Sync status events
    rpc NodeStreamSyncStatus(google.protobuf.Empty) returns (stream SyncStatus);
    // Node error events
    rpc NodeStreamError(google.protobuf.Empty) returns (stream NodeError);

    // Mesh stream facade

    // Transcation status change method - emitted after tx was processed by STF
    rpc TranscationProcessor(google.protobuf.Empty) returns (stream Transaction);

    // Account events
    rpc MeshStreamAccount(google.protobuf.Empty) returns (stream Account);
    // Reward events
    rpc MeshStreamReward(google.protobuf.Empty) returns (stream Reward);
    // Layer events
    rpc MeshStreamLayer(google.protobuf.Empty) returns (stream Layer);
    // Layer state change events
    rpc MeshStreamLayerState(google.protobuf.Empty) returns (stream SimpleInt);
}
