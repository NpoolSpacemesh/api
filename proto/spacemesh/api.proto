syntax = "proto3";
package spacemesh;
import "google/protobuf/empty.proto";
import "spacemesh/types.proto";

service SpacemeshService {

    // A simple test endpoint
    rpc Echo(SimpleString) returns (SimpleString);

    ////////// Node facade

    // Returns the version of the node software as a semver string
    rpc NodeVersion(google.protobuf.Empty) returns (SimpleString);

    // Returns node status
    rpc NodeStatus(google.protobuf.Empty) returns (NodeStatus);

    // Tell the node to start syncing
    rpc NodeSyncStart(google.protobuf.Empty) returns (google.protobuf.Empty);

    ///////// Mesh facade

    // Returns mesh genesis time as unix epoch time
    rpc MeshGenesisTime(google.protobuf.Empty) returns (SimpleInt);

    // Returns current layer number
    rpc MeshCurrentLayer(google.protobuf.Empty) returns (SimpleInt);

    // Returns current epoch number
    rpc MeshCurrentEpoch(google.protobuf.Empty) returns (SimpleInt);

    // Returns network ID
    rpc MeshNetId(google.protobuf.Empty) returns (SimpleInt);

    // Returns number of layers per epoch
    rpc MeshEpochNumLayers(google.protobuf.Empty) returns (SimpleInt);

    // STREAMS

    ////////// Node stream facade

    // Sync status events
    rpc NodeStreamSyncStatus(google.protobuf.Empty) returns (stream SyncStatus);

    // Node error events
    rpc NodeStreamError(google.protobuf.Empty) returns (stream NodeError);

    //////////////// Mesh stream facade

    // Transcation receipts - emitted after tx was processed by STF (or rejected before STF)
    rpc TransactionProcessing(google.protobuf.Empty) returns (stream TransactionReceipt);

    // App events - emitted by app methods impl code
    rpc AppEvents(google.protobuf.Empty) returns (stream AppEvent);

    // Accounts
    rpc MeshStreamAccount(google.protobuf.Empty) returns (stream Account);

    // Rewards
    rpc MeshStreamReward(google.protobuf.Empty) returns (stream Reward);

    // Layers
    rpc MeshStreamLayer(google.protobuf.Empty) returns (stream Layer);

}
