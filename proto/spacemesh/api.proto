syntax = "proto3";
package spacemesh;
import "google/protobuf/empty.proto";
import "spacemesh/types.proto";

service SpacemeshService {

    // A simple test endpoint
    rpc Echo(SimpleString) returns (SimpleString);

    ////////// Node facade

    // Returns the version of the node software as a semver string
    rpc NodeVersion(google.protobuf.Empty) returns (SimpleString);

    // Returns the version of the github tag or branch used to build the node
    rpc NodeBuild(google.protobuf.Empty) returns (SimpleString);

    // Returns node status
    rpc NodeStatus(google.protobuf.Empty) returns (NodeStatus);

    // Tell the node to start syncing
    rpc NodeSyncStart(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Gracefully shut down the node
    rpc NodeShutdown(google.protobuf.Empty) returns (google.protobuf.Empty);

    ///////// Mesh facade. low-level data access for clients such as backup, explore and dash.

    // Returns mesh genesis time as unix epoch time
    rpc MeshGenesisTime(google.protobuf.Empty) returns (SimpleInt);

    // Returns current layer number
    rpc MeshCurrentLayer(google.protobuf.Empty) returns (SimpleInt);

    // Returns current epoch number
    rpc MeshCurrentEpoch(google.protobuf.Empty) returns (SimpleInt);

    // Returns network ID
    rpc MeshNetId(google.protobuf.Empty) returns (SimpleInt);

    // Returns number of layers per epoch (a network constant)
    rpc MeshEpochNumLayers(google.protobuf.Empty) returns (SimpleInt);

    ////////// Node streaming data facade

    // Sync status events
    rpc NodeSyncStatuses(google.protobuf.Empty) returns (stream NodeSyncStatus);

    // Node error events
    rpc NodeErrors(google.protobuf.Empty) returns (stream NodeError);

    ///////// Mesh streaming data facade

    // Receipts - emitted after tx was processed by STF (or rejected before STF)
    rpc MeshTransactionReceipts(google.protobuf.Empty) returns (stream TransactionReceipt);

    // App Events - emitted by app methods impl code trigged by an app transaction
    rpc MeshAppEvents(google.protobuf.Empty) returns (stream AppEvent);

    // Accounts
    rpc MeshAccounts(google.protobuf.Empty) returns (stream Account);

    // Rewards
    rpc MeshRewards(google.protobuf.Empty) returns (stream Reward);

    // Layers
    rpc MeshLayers(google.protobuf.Empty) returns (stream Layer);


    //// Streaming mesh methods designed for light-weight clients such as wallets.
    //// Clients register to receive events for a specific account.

    // A stream of new txs (or update to a tx fields) where the account is sender or receiver
    rpc MeshAccountTransactions(AccountId) returns (stream Transaction);

    // All rewards awarded to an account are emitted
    rpc MeshAccountRewards(AccountId) returns (stream Reward);

    // All rewards awarded to a smesher id are emitted
    rpc MeshSmesherRewards(SmesherId) returns (stream Reward);

    // Account emitted on account data change. e.g. balance change, counter change, etc...
    rpc MeshAccount(AccountId) returns (stream Account);

}
