// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spacemesh/v1/node.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("spacemesh/v1/node.proto", fileDescriptor_00f244a7dc447544) }

var fileDescriptor_00f244a7dc447544 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x6e, 0x1a, 0x31,
	0x10, 0xc7, 0x45, 0x45, 0x69, 0x6b, 0xe8, 0xc5, 0x87, 0x7e, 0x2c, 0x1f, 0x2d, 0x1c, 0x7b, 0xb0,
	0x0b, 0xed, 0xa9, 0xea, 0x21, 0x22, 0xe2, 0x10, 0x29, 0xca, 0x21, 0x1b, 0x05, 0x29, 0x97, 0xc8,
	0xec, 0x4e, 0x76, 0x57, 0x62, 0x3d, 0x1b, 0xdb, 0x4b, 0xc4, 0x35, 0xaf, 0x90, 0x47, 0xcb, 0x2b,
	0xe4, 0x0d, 0xf2, 0x02, 0x11, 0xbb, 0x36, 0x81, 0x0d, 0x70, 0xf4, 0xfc, 0xfe, 0xf3, 0xf3, 0x8c,
	0x6c, 0xf2, 0x55, 0x67, 0x22, 0x80, 0x14, 0x74, 0xcc, 0x17, 0x43, 0x2e, 0x31, 0x04, 0x96, 0x29,
	0x34, 0x48, 0x5b, 0x6b, 0xc0, 0x16, 0x43, 0xaf, 0x13, 0x21, 0x46, 0x73, 0xe0, 0x22, 0x4b, 0xb8,
	0x90, 0x12, 0x8d, 0x30, 0x09, 0x4a, 0x5d, 0x66, 0xbd, 0xb6, 0xa5, 0xc5, 0x69, 0x96, 0xdf, 0x70,
	0x48, 0x33, 0xb3, 0xb4, 0xb0, 0xfb, 0xe6, 0x86, 0x6b, 0xb3, 0xcc, 0xc0, 0xf6, 0x8e, 0x9e, 0xeb,
	0xa4, 0x79, 0x86, 0x21, 0xf8, 0xa0, 0x16, 0x49, 0x00, 0x74, 0x4a, 0xea, 0x93, 0x20, 0x46, 0xfa,
	0x9d, 0x6d, 0x0e, 0xc0, 0x56, 0xb5, 0x73, 0xb8, 0xcd, 0x41, 0x1b, 0xcf, 0xdb, 0x85, 0x74, 0x86,
	0x52, 0xc3, 0xe0, 0xdb, 0xfd, 0xe3, 0xd3, 0xc3, 0x3b, 0x3a, 0xf8, 0xec, 0x2e, 0xe3, 0x10, 0xc4,
	0xf8, 0xaf, 0xf6, 0x8b, 0x1e, 0x91, 0x0f, 0x97, 0xa0, 0x74, 0x82, 0x92, 0x7e, 0x61, 0xe5, 0xc0,
	0xcc, 0x0d, 0xcc, 0x26, 0xab, 0x81, 0xbd, 0xee, 0xb6, 0xd8, 0xc6, 0x9d, 0x9b, 0xfe, 0x27, 0xef,
	0xc7, 0x79, 0x32, 0x0f, 0xf7, 0xf6, 0xb7, 0xb7, 0xfb, 0x8b, 0xf0, 0xba, 0xfb, 0x98, 0x34, 0x7c,
	0x23, 0x4c, 0xae, 0x69, 0x25, 0x56, 0x56, 0xdd, 0x72, 0x9d, 0xdd, 0xd0, 0x4a, 0x4e, 0xc9, 0x27,
	0x7f, 0x29, 0x03, 0xdf, 0x08, 0x65, 0x68, 0xaf, 0x12, 0x75, 0xc0, 0xa9, 0x7e, 0xec, 0xe5, 0xd6,
	0x76, 0x42, 0x3e, 0xfa, 0x71, 0x6e, 0x42, 0xbc, 0x93, 0xb4, 0xb2, 0xbb, 0xab, 0x3b, 0x57, 0x6f,
	0x1f, 0xb6, 0xaa, 0x29, 0x69, 0x95, 0xa3, 0xfa, 0x46, 0x81, 0x48, 0x69, 0x7f, 0xd7, 0x1a, 0x25,
	0x73, 0xca, 0xc1, 0xa1, 0x48, 0xa9, 0xfd, 0x5d, 0xa3, 0x17, 0xa4, 0x39, 0x51, 0x0a, 0x95, 0xf5,
	0xfe, 0xac, 0xbc, 0xfd, 0x2b, 0x72, 0xda, 0xfe, 0x81, 0x84, 0xb3, 0x8e, 0xff, 0x5e, 0x8d, 0xa2,
	0xc4, 0xc4, 0xf9, 0x8c, 0x05, 0x98, 0xf2, 0x75, 0x03, 0xea, 0xe2, 0x87, 0x2b, 0x98, 0x83, 0xd0,
	0xc0, 0x23, 0xe4, 0x9b, 0x9f, 0x77, 0xd6, 0x28, 0xde, 0xfb, 0xcf, 0x4b, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x0d, 0x8e, 0x56, 0xa6, 0x35, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeServiceClient interface {
	// A simple test endpoint
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Returns the version of the node software as a semver string
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Returns the github tag or branch used to build the node
	Build(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BuildResponse, error)
	// Current node status (net and sync)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Request that the node start syncing the mesh
	SyncStart(ctx context.Context, in *SyncStartRequest, opts ...grpc.CallOption) (*SyncStartResponse, error)
	// Request that the node initiate graceful shutdown
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	// Node status events (sync and net)
	StatusStream(ctx context.Context, in *StatusStreamRequest, opts ...grpc.CallOption) (NodeService_StatusStreamClient, error)
	// Node error events
	ErrorStream(ctx context.Context, in *ErrorStreamRequest, opts ...grpc.CallOption) (NodeService_ErrorStreamClient, error)
}

type nodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewNodeServiceClient(cc *grpc.ClientConn) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.NodeService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.NodeService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Build(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.NodeService/Build", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.NodeService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SyncStart(ctx context.Context, in *SyncStartRequest, opts ...grpc.CallOption) (*SyncStartResponse, error) {
	out := new(SyncStartResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.NodeService/SyncStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.NodeService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) StatusStream(ctx context.Context, in *StatusStreamRequest, opts ...grpc.CallOption) (NodeService_StatusStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeService_serviceDesc.Streams[0], "/spacemesh.v1.NodeService/StatusStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceStatusStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_StatusStreamClient interface {
	Recv() (*StatusStreamResponse, error)
	grpc.ClientStream
}

type nodeServiceStatusStreamClient struct {
	grpc.ClientStream
}

func (x *nodeServiceStatusStreamClient) Recv() (*StatusStreamResponse, error) {
	m := new(StatusStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) ErrorStream(ctx context.Context, in *ErrorStreamRequest, opts ...grpc.CallOption) (NodeService_ErrorStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeService_serviceDesc.Streams[1], "/spacemesh.v1.NodeService/ErrorStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceErrorStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_ErrorStreamClient interface {
	Recv() (*ErrorStreamResponse, error)
	grpc.ClientStream
}

type nodeServiceErrorStreamClient struct {
	grpc.ClientStream
}

func (x *nodeServiceErrorStreamClient) Recv() (*ErrorStreamResponse, error) {
	m := new(ErrorStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServiceServer is the server API for NodeService service.
type NodeServiceServer interface {
	// A simple test endpoint
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// Returns the version of the node software as a semver string
	Version(context.Context, *empty.Empty) (*VersionResponse, error)
	// Returns the github tag or branch used to build the node
	Build(context.Context, *empty.Empty) (*BuildResponse, error)
	// Current node status (net and sync)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Request that the node start syncing the mesh
	SyncStart(context.Context, *SyncStartRequest) (*SyncStartResponse, error)
	// Request that the node initiate graceful shutdown
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	// Node status events (sync and net)
	StatusStream(*StatusStreamRequest, NodeService_StatusStreamServer) error
	// Node error events
	ErrorStream(*ErrorStreamRequest, NodeService_ErrorStreamServer) error
}

// UnimplementedNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (*UnimplementedNodeServiceServer) Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedNodeServiceServer) Version(ctx context.Context, req *empty.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedNodeServiceServer) Build(ctx context.Context, req *empty.Empty) (*BuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (*UnimplementedNodeServiceServer) Status(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedNodeServiceServer) SyncStart(ctx context.Context, req *SyncStartRequest) (*SyncStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncStart not implemented")
}
func (*UnimplementedNodeServiceServer) Shutdown(ctx context.Context, req *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (*UnimplementedNodeServiceServer) StatusStream(req *StatusStreamRequest, srv NodeService_StatusStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StatusStream not implemented")
}
func (*UnimplementedNodeServiceServer) ErrorStream(req *ErrorStreamRequest, srv NodeService_ErrorStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ErrorStream not implemented")
}

func RegisterNodeServiceServer(s *grpc.Server, srv NodeServiceServer) {
	s.RegisterService(&_NodeService_serviceDesc, srv)
}

func _NodeService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.NodeService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.NodeService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.NodeService/Build",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Build(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.NodeService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SyncStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SyncStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.NodeService/SyncStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SyncStart(ctx, req.(*SyncStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.NodeService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_StatusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).StatusStream(m, &nodeServiceStatusStreamServer{stream})
}

type NodeService_StatusStreamServer interface {
	Send(*StatusStreamResponse) error
	grpc.ServerStream
}

type nodeServiceStatusStreamServer struct {
	grpc.ServerStream
}

func (x *nodeServiceStatusStreamServer) Send(m *StatusStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_ErrorStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ErrorStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).ErrorStream(m, &nodeServiceErrorStreamServer{stream})
}

type NodeService_ErrorStreamServer interface {
	Send(*ErrorStreamResponse) error
	grpc.ServerStream
}

type nodeServiceErrorStreamServer struct {
	grpc.ServerStream
}

func (x *nodeServiceErrorStreamServer) Send(m *ErrorStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _NodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v1.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _NodeService_Echo_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _NodeService_Version_Handler,
		},
		{
			MethodName: "Build",
			Handler:    _NodeService_Build_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _NodeService_Status_Handler,
		},
		{
			MethodName: "SyncStart",
			Handler:    _NodeService_SyncStart_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _NodeService_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StatusStream",
			Handler:       _NodeService_StatusStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ErrorStream",
			Handler:       _NodeService_ErrorStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v1/node.proto",
}
