// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spacemesh/v1/mesh.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("spacemesh/v1/mesh.proto", fileDescriptor_c9578d5a316dda8b) }

var fileDescriptor_c9578d5a316dda8b = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4d, 0x4f, 0xe3, 0x30,
	0x10, 0x86, 0xb5, 0x87, 0xed, 0xc1, 0xad, 0xf6, 0x10, 0xed, 0x2e, 0x28, 0x15, 0x12, 0x45, 0x5c,
	0x00, 0xc9, 0xa6, 0x85, 0x23, 0x17, 0x3e, 0x2a, 0xa0, 0xa2, 0x15, 0xb4, 0x3d, 0x71, 0x41, 0x8e,
	0x19, 0x92, 0x48, 0x4d, 0x1c, 0x3c, 0x4e, 0x45, 0xfe, 0x2f, 0x3f, 0x04, 0x35, 0x4e, 0x43, 0x0c,
	0x4d, 0x55, 0x4e, 0x39, 0xcc, 0xfb, 0x3c, 0xef, 0x58, 0xd1, 0x90, 0x2d, 0x4c, 0xb8, 0x80, 0x08,
	0x30, 0x60, 0xf3, 0x2e, 0x5b, 0x7c, 0x69, 0xa2, 0xa4, 0x96, 0x4e, 0xab, 0x1c, 0xd0, 0x79, 0xd7,
	0x6d, 0xfb, 0x52, 0xfa, 0x33, 0x60, 0xf9, 0xcc, 0x4b, 0x5f, 0x18, 0x44, 0x89, 0xce, 0x4c, 0xd4,
	0xdd, 0xf9, 0xe6, 0x78, 0xd2, 0x59, 0x02, 0x68, 0xc6, 0xbd, 0xf7, 0x06, 0x69, 0x0e, 0x01, 0x83,
	0x09, 0xa8, 0x79, 0x28, 0xc0, 0xb9, 0x21, 0xcd, 0x6b, 0x88, 0x01, 0x43, 0x9c, 0x86, 0x11, 0x38,
	0xff, 0xa9, 0x71, 0xd3, 0xa5, 0x9b, 0xf6, 0x17, 0x6e, 0xb7, 0x43, 0xab, 0x1b, 0xd0, 0x0a, 0x32,
	0x06, 0x4c, 0x64, 0x8c, 0xe0, 0x0c, 0x48, 0xeb, 0x32, 0x55, 0x0a, 0x62, 0x7d, 0xc7, 0x33, 0x50,
	0xb5, 0xaa, 0x3d, 0x5b, 0x55, 0x65, 0x56, 0xb8, 0xfa, 0x89, 0x14, 0xc1, 0x0f, 0x5d, 0x39, 0x53,
	0xba, 0xce, 0xc8, 0xef, 0x11, 0xe8, 0xdb, 0xe7, 0x5a, 0x49, 0xdb, 0x96, 0xe4, 0xe1, 0x92, 0x1e,
	0x91, 0x3f, 0xb9, 0x6e, 0x94, 0x46, 0xf9, 0x8a, 0x58, 0xab, 0xd9, 0xb7, 0x35, 0x36, 0x55, 0xfa,
	0x3c, 0xb2, 0x3d, 0xe4, 0x6f, 0x53, 0xc5, 0x63, 0xe4, 0x42, 0x87, 0x32, 0xc6, 0x7b, 0x50, 0x13,
	0x10, 0x32, 0xae, 0x5f, 0x90, 0xda, 0xe6, 0x3a, 0xbe, 0xec, 0x88, 0xc8, 0xdf, 0x73, 0x21, 0x64,
	0x1a, 0xeb, 0xc5, 0x9f, 0xbe, 0xe2, 0x9a, 0x3f, 0xa4, 0xa0, 0x32, 0xe7, 0xc0, 0xf6, 0xac, 0xca,
	0x8c, 0xe1, 0x35, 0x05, 0xd4, 0xee, 0xe1, 0x26, 0xd1, 0xa2, 0x6e, 0x4c, 0x9a, 0xe6, 0x91, 0xa6,
	0x65, 0xd7, 0x46, 0x2b, 0xa3, 0xa5, 0xbc, 0xb3, 0x26, 0x51, 0x38, 0x15, 0xf9, 0xf7, 0xa5, 0x73,
	0xa2, 0x15, 0xf0, 0xc8, 0x59, 0xbf, 0x98, 0x09, 0x2d, 0x7b, 0x8e, 0x36, 0xca, 0x9a, 0xc6, 0xe3,
	0x5f, 0xce, 0xa0, 0x78, 0x47, 0xd1, 0xb4, 0xe1, 0x29, 0x54, 0x90, 0x4f, 0xd7, 0xc5, 0xe9, 0x63,
	0xcf, 0x0f, 0x75, 0x90, 0x7a, 0x54, 0xc8, 0x88, 0x95, 0x80, 0x44, 0xc6, 0x93, 0x90, 0x29, 0x98,
	0x01, 0x47, 0x60, 0xbe, 0x64, 0xd5, 0x6b, 0xf5, 0x1a, 0x79, 0xd5, 0xc9, 0x47, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x1d, 0x91, 0x6c, 0x96, 0x08, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MeshServiceClient is the client API for MeshService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeshServiceClient interface {
	// Network genesis time as unix epoch time
	GenesisTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GenesisTimeResponse, error)
	// Current layer number
	CurrentLayer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CurrentLayerResponse, error)
	// Current epoch number
	CurrentEpoch(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CurrentEpochResponse, error)
	// Network ID
	NetId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetIdResponse, error)
	// Number of layers per epoch (a network parameter)
	EpochNumLayers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EpochNumLayersResponse, error)
	// Number of transactions per second (a network parameter)
	MaxTransactionsPerSecond(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MaxTransactionsPerSecondResponse, error)
	// Get account data query
	AccountMeshDataQuery(ctx context.Context, in *AccountMeshDataQueryRequest, opts ...grpc.CallOption) (*AccountMeshDataQueryResponse, error)
	// Layers data query
	LayersQuery(ctx context.Context, in *LayersQueryRequest, opts ...grpc.CallOption) (*LayersQueryResponse, error)
	// A stream of transactions and activations from an account.
	// Includes simple coin transactions with the account as the destination.
	AccountMeshDataStream(ctx context.Context, in *AccountMeshDataStreamRequest, opts ...grpc.CallOption) (MeshService_AccountMeshDataStreamClient, error)
	// Layer with blocks, transactions and activations
	// Sent each time layer data changes. Designed for heavy-duty clients.
	LayerStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MeshService_LayerStreamClient, error)
}

type meshServiceClient struct {
	cc *grpc.ClientConn
}

func NewMeshServiceClient(cc *grpc.ClientConn) MeshServiceClient {
	return &meshServiceClient{cc}
}

func (c *meshServiceClient) GenesisTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GenesisTimeResponse, error) {
	out := new(GenesisTimeResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.MeshService/GenesisTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) CurrentLayer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CurrentLayerResponse, error) {
	out := new(CurrentLayerResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.MeshService/CurrentLayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) CurrentEpoch(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CurrentEpochResponse, error) {
	out := new(CurrentEpochResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.MeshService/CurrentEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) NetId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetIdResponse, error) {
	out := new(NetIdResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.MeshService/NetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) EpochNumLayers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EpochNumLayersResponse, error) {
	out := new(EpochNumLayersResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.MeshService/EpochNumLayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) MaxTransactionsPerSecond(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MaxTransactionsPerSecondResponse, error) {
	out := new(MaxTransactionsPerSecondResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.MeshService/MaxTransactionsPerSecond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) AccountMeshDataQuery(ctx context.Context, in *AccountMeshDataQueryRequest, opts ...grpc.CallOption) (*AccountMeshDataQueryResponse, error) {
	out := new(AccountMeshDataQueryResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.MeshService/AccountMeshDataQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) LayersQuery(ctx context.Context, in *LayersQueryRequest, opts ...grpc.CallOption) (*LayersQueryResponse, error) {
	out := new(LayersQueryResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.MeshService/LayersQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshServiceClient) AccountMeshDataStream(ctx context.Context, in *AccountMeshDataStreamRequest, opts ...grpc.CallOption) (MeshService_AccountMeshDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MeshService_serviceDesc.Streams[0], "/spacemesh.v1.MeshService/AccountMeshDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &meshServiceAccountMeshDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MeshService_AccountMeshDataStreamClient interface {
	Recv() (*AccountMeshDataStreamResponse, error)
	grpc.ClientStream
}

type meshServiceAccountMeshDataStreamClient struct {
	grpc.ClientStream
}

func (x *meshServiceAccountMeshDataStreamClient) Recv() (*AccountMeshDataStreamResponse, error) {
	m := new(AccountMeshDataStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *meshServiceClient) LayerStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (MeshService_LayerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MeshService_serviceDesc.Streams[1], "/spacemesh.v1.MeshService/LayerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &meshServiceLayerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MeshService_LayerStreamClient interface {
	Recv() (*LayerStreamResponse, error)
	grpc.ClientStream
}

type meshServiceLayerStreamClient struct {
	grpc.ClientStream
}

func (x *meshServiceLayerStreamClient) Recv() (*LayerStreamResponse, error) {
	m := new(LayerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MeshServiceServer is the server API for MeshService service.
type MeshServiceServer interface {
	// Network genesis time as unix epoch time
	GenesisTime(context.Context, *empty.Empty) (*GenesisTimeResponse, error)
	// Current layer number
	CurrentLayer(context.Context, *empty.Empty) (*CurrentLayerResponse, error)
	// Current epoch number
	CurrentEpoch(context.Context, *empty.Empty) (*CurrentEpochResponse, error)
	// Network ID
	NetId(context.Context, *empty.Empty) (*NetIdResponse, error)
	// Number of layers per epoch (a network parameter)
	EpochNumLayers(context.Context, *empty.Empty) (*EpochNumLayersResponse, error)
	// Number of transactions per second (a network parameter)
	MaxTransactionsPerSecond(context.Context, *empty.Empty) (*MaxTransactionsPerSecondResponse, error)
	// Get account data query
	AccountMeshDataQuery(context.Context, *AccountMeshDataQueryRequest) (*AccountMeshDataQueryResponse, error)
	// Layers data query
	LayersQuery(context.Context, *LayersQueryRequest) (*LayersQueryResponse, error)
	// A stream of transactions and activations from an account.
	// Includes simple coin transactions with the account as the destination.
	AccountMeshDataStream(*AccountMeshDataStreamRequest, MeshService_AccountMeshDataStreamServer) error
	// Layer with blocks, transactions and activations
	// Sent each time layer data changes. Designed for heavy-duty clients.
	LayerStream(*empty.Empty, MeshService_LayerStreamServer) error
}

// UnimplementedMeshServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMeshServiceServer struct {
}

func (*UnimplementedMeshServiceServer) GenesisTime(ctx context.Context, req *empty.Empty) (*GenesisTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisTime not implemented")
}
func (*UnimplementedMeshServiceServer) CurrentLayer(ctx context.Context, req *empty.Empty) (*CurrentLayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentLayer not implemented")
}
func (*UnimplementedMeshServiceServer) CurrentEpoch(ctx context.Context, req *empty.Empty) (*CurrentEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentEpoch not implemented")
}
func (*UnimplementedMeshServiceServer) NetId(ctx context.Context, req *empty.Empty) (*NetIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetId not implemented")
}
func (*UnimplementedMeshServiceServer) EpochNumLayers(ctx context.Context, req *empty.Empty) (*EpochNumLayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochNumLayers not implemented")
}
func (*UnimplementedMeshServiceServer) MaxTransactionsPerSecond(ctx context.Context, req *empty.Empty) (*MaxTransactionsPerSecondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxTransactionsPerSecond not implemented")
}
func (*UnimplementedMeshServiceServer) AccountMeshDataQuery(ctx context.Context, req *AccountMeshDataQueryRequest) (*AccountMeshDataQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountMeshDataQuery not implemented")
}
func (*UnimplementedMeshServiceServer) LayersQuery(ctx context.Context, req *LayersQueryRequest) (*LayersQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LayersQuery not implemented")
}
func (*UnimplementedMeshServiceServer) AccountMeshDataStream(req *AccountMeshDataStreamRequest, srv MeshService_AccountMeshDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountMeshDataStream not implemented")
}
func (*UnimplementedMeshServiceServer) LayerStream(req *empty.Empty, srv MeshService_LayerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LayerStream not implemented")
}

func RegisterMeshServiceServer(s *grpc.Server, srv MeshServiceServer) {
	s.RegisterService(&_MeshService_serviceDesc, srv)
}

func _MeshService_GenesisTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).GenesisTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.MeshService/GenesisTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).GenesisTime(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_CurrentLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).CurrentLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.MeshService/CurrentLayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).CurrentLayer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_CurrentEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).CurrentEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.MeshService/CurrentEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).CurrentEpoch(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_NetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).NetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.MeshService/NetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).NetId(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_EpochNumLayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).EpochNumLayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.MeshService/EpochNumLayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).EpochNumLayers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_MaxTransactionsPerSecond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).MaxTransactionsPerSecond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.MeshService/MaxTransactionsPerSecond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).MaxTransactionsPerSecond(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_AccountMeshDataQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountMeshDataQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).AccountMeshDataQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.MeshService/AccountMeshDataQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).AccountMeshDataQuery(ctx, req.(*AccountMeshDataQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_LayersQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LayersQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshServiceServer).LayersQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.MeshService/LayersQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshServiceServer).LayersQuery(ctx, req.(*LayersQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshService_AccountMeshDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountMeshDataStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeshServiceServer).AccountMeshDataStream(m, &meshServiceAccountMeshDataStreamServer{stream})
}

type MeshService_AccountMeshDataStreamServer interface {
	Send(*AccountMeshDataStreamResponse) error
	grpc.ServerStream
}

type meshServiceAccountMeshDataStreamServer struct {
	grpc.ServerStream
}

func (x *meshServiceAccountMeshDataStreamServer) Send(m *AccountMeshDataStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MeshService_LayerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeshServiceServer).LayerStream(m, &meshServiceLayerStreamServer{stream})
}

type MeshService_LayerStreamServer interface {
	Send(*LayerStreamResponse) error
	grpc.ServerStream
}

type meshServiceLayerStreamServer struct {
	grpc.ServerStream
}

func (x *meshServiceLayerStreamServer) Send(m *LayerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MeshService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v1.MeshService",
	HandlerType: (*MeshServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenesisTime",
			Handler:    _MeshService_GenesisTime_Handler,
		},
		{
			MethodName: "CurrentLayer",
			Handler:    _MeshService_CurrentLayer_Handler,
		},
		{
			MethodName: "CurrentEpoch",
			Handler:    _MeshService_CurrentEpoch_Handler,
		},
		{
			MethodName: "NetId",
			Handler:    _MeshService_NetId_Handler,
		},
		{
			MethodName: "EpochNumLayers",
			Handler:    _MeshService_EpochNumLayers_Handler,
		},
		{
			MethodName: "MaxTransactionsPerSecond",
			Handler:    _MeshService_MaxTransactionsPerSecond_Handler,
		},
		{
			MethodName: "AccountMeshDataQuery",
			Handler:    _MeshService_AccountMeshDataQuery_Handler,
		},
		{
			MethodName: "LayersQuery",
			Handler:    _MeshService_LayersQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AccountMeshDataStream",
			Handler:       _MeshService_AccountMeshDataStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LayerStream",
			Handler:       _MeshService_LayerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v1/mesh.proto",
}
