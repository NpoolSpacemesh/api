// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: spacemesh/v1/post.proto

package spacemeshv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PoSTService_Connect_FullMethodName = "/spacemesh.v1.PoSTService/Connect"
)

// PoSTServiceClient is the client API for PoSTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoSTServiceClient interface {
	// Connect allows a dedicated PoST node to connect to the spacemesh node.
	Connect(ctx context.Context, opts ...grpc.CallOption) (PoSTService_ConnectClient, error)
}

type poSTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPoSTServiceClient(cc grpc.ClientConnInterface) PoSTServiceClient {
	return &poSTServiceClient{cc}
}

func (c *poSTServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (PoSTService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &PoSTService_ServiceDesc.Streams[0], PoSTService_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &poSTServiceConnectClient{stream}
	return x, nil
}

type PoSTService_ConnectClient interface {
	Send(*ServiceResponse) error
	Recv() (*NodeRequest, error)
	grpc.ClientStream
}

type poSTServiceConnectClient struct {
	grpc.ClientStream
}

func (x *poSTServiceConnectClient) Send(m *ServiceResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *poSTServiceConnectClient) Recv() (*NodeRequest, error) {
	m := new(NodeRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PoSTServiceServer is the server API for PoSTService service.
// All implementations should embed UnimplementedPoSTServiceServer
// for forward compatibility
type PoSTServiceServer interface {
	// Connect allows a dedicated PoST node to connect to the spacemesh node.
	Connect(PoSTService_ConnectServer) error
}

// UnimplementedPoSTServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPoSTServiceServer struct {
}

func (UnimplementedPoSTServiceServer) Connect(PoSTService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

// UnsafePoSTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoSTServiceServer will
// result in compilation errors.
type UnsafePoSTServiceServer interface {
	mustEmbedUnimplementedPoSTServiceServer()
}

func RegisterPoSTServiceServer(s grpc.ServiceRegistrar, srv PoSTServiceServer) {
	s.RegisterService(&PoSTService_ServiceDesc, srv)
}

func _PoSTService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PoSTServiceServer).Connect(&poSTServiceConnectServer{stream})
}

type PoSTService_ConnectServer interface {
	Send(*NodeRequest) error
	Recv() (*ServiceResponse, error)
	grpc.ServerStream
}

type poSTServiceConnectServer struct {
	grpc.ServerStream
}

func (x *poSTServiceConnectServer) Send(m *NodeRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *poSTServiceConnectServer) Recv() (*ServiceResponse, error) {
	m := new(ServiceResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PoSTService_ServiceDesc is the grpc.ServiceDesc for PoSTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoSTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v1.PoSTService",
	HandlerType: (*PoSTServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _PoSTService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "spacemesh/v1/post.proto",
}
