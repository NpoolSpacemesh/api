// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spacemesh/v1/tx.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("spacemesh/v1/tx.proto", fileDescriptor_c8a385573c79cfb7) }

var fileDescriptor_c8a385573c79cfb7 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x05, 0x03, 0x83, 0xc5, 0x82, 0x25, 0x84, 0x14, 0x76, 0x58, 0xc0, 0x26, 0x81, 0x27,
	0xe0, 0x11, 0x30, 0x13, 0x0b, 0x72, 0xcc, 0x29, 0xb1, 0x84, 0x63, 0xd7, 0x77, 0x89, 0xd2, 0x57,
	0xed, 0xd3, 0x54, 0x4a, 0xda, 0xc8, 0x4a, 0x5a, 0xa5, 0xeb, 0xfd, 0xdf, 0xfd, 0xdf, 0xf0, 0xb3,
	0x7b, 0x0c, 0xda, 0x80, 0x03, 0xac, 0x65, 0x97, 0x4b, 0xea, 0x45, 0x88, 0x9e, 0x3c, 0xbf, 0x9d,
	0xce, 0xa2, 0xcb, 0xb3, 0xc7, 0x19, 0xf4, 0x4b, 0xdb, 0x00, 0x38, 0xa2, 0xc5, 0xee, 0x9a, 0xf1,
	0xef, 0xa8, 0x1b, 0xd4, 0x86, 0xac, 0x6f, 0x14, 0xc4, 0xce, 0x1a, 0xe0, 0x7f, 0xec, 0x4e, 0xb5,
	0xa5, 0xb3, 0x94, 0x64, 0xfc, 0x49, 0xa4, 0xbd, 0x62, 0x01, 0x7c, 0xc1, 0xa6, 0x05, 0xa4, 0xec,
	0x79, 0x95, 0xc3, 0xe0, 0x1b, 0x1c, 0x2c, 0xc9, 0x19, 0x15, 0x69, 0x82, 0xb9, 0x65, 0x01, 0x9c,
	0xb1, 0x9c, 0xe0, 0x0e, 0x96, 0x9e, 0x3d, 0x2c, 0x42, 0x45, 0x11, 0xb4, 0xe3, 0x2f, 0x2b, 0x1d,
	0x23, 0x76, 0x34, 0xbe, 0x5e, 0x48, 0x8f, 0xde, 0xb7, 0xab, 0xcf, 0x8f, 0x9f, 0xa2, 0xb2, 0x54,
	0xb7, 0xa5, 0x30, 0xde, 0xc9, 0xe9, 0xd9, 0xa3, 0xd4, 0xc1, 0xca, 0x08, 0xff, 0xa0, 0x11, 0x64,
	0xe5, 0x65, 0xba, 0x50, 0x79, 0x33, 0x2c, 0xf3, 0xbe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x76, 0xe5,
	0x2d, 0x2e, 0xdd, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionServiceClient interface {
	// Submit a new tx to the node for processing. The response
	// TransactionState message contains both the txid of the new tx, as well
	// as whether or not it was admitted into the mempool.
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
	// Returns current tx state for one or more txs which indicates if a tx is
	// on the mesh, on its way to the mesh or was rejected and will never get
	// to the mesh
	TransactionsState(ctx context.Context, in *TransactionsStateRequest, opts ...grpc.CallOption) (*TransactionsStateResponse, error)
	// Returns tx state for one or more txs every time the tx state changes for
	// one of these txs
	TransactionsStateStream(ctx context.Context, in *TransactionsStateStreamRequest, opts ...grpc.CallOption) (TransactionService_TransactionsStateStreamClient, error)
}

type transactionServiceClient struct {
	cc *grpc.ClientConn
}

func NewTransactionServiceClient(cc *grpc.ClientConn) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	out := new(SubmitTransactionResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.TransactionService/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) TransactionsState(ctx context.Context, in *TransactionsStateRequest, opts ...grpc.CallOption) (*TransactionsStateResponse, error) {
	out := new(TransactionsStateResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.TransactionService/TransactionsState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) TransactionsStateStream(ctx context.Context, in *TransactionsStateStreamRequest, opts ...grpc.CallOption) (TransactionService_TransactionsStateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionService_serviceDesc.Streams[0], "/spacemesh.v1.TransactionService/TransactionsStateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceTransactionsStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionService_TransactionsStateStreamClient interface {
	Recv() (*TransactionsStateStreamResponse, error)
	grpc.ClientStream
}

type transactionServiceTransactionsStateStreamClient struct {
	grpc.ClientStream
}

func (x *transactionServiceTransactionsStateStreamClient) Recv() (*TransactionsStateStreamResponse, error) {
	m := new(TransactionsStateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionServiceServer is the server API for TransactionService service.
type TransactionServiceServer interface {
	// Submit a new tx to the node for processing. The response
	// TransactionState message contains both the txid of the new tx, as well
	// as whether or not it was admitted into the mempool.
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
	// Returns current tx state for one or more txs which indicates if a tx is
	// on the mesh, on its way to the mesh or was rejected and will never get
	// to the mesh
	TransactionsState(context.Context, *TransactionsStateRequest) (*TransactionsStateResponse, error)
	// Returns tx state for one or more txs every time the tx state changes for
	// one of these txs
	TransactionsStateStream(*TransactionsStateStreamRequest, TransactionService_TransactionsStateStreamServer) error
}

// UnimplementedTransactionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (*UnimplementedTransactionServiceServer) SubmitTransaction(ctx context.Context, req *SubmitTransactionRequest) (*SubmitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (*UnimplementedTransactionServiceServer) TransactionsState(ctx context.Context, req *TransactionsStateRequest) (*TransactionsStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsState not implemented")
}
func (*UnimplementedTransactionServiceServer) TransactionsStateStream(req *TransactionsStateStreamRequest, srv TransactionService_TransactionsStateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TransactionsStateStream not implemented")
}

func RegisterTransactionServiceServer(s *grpc.Server, srv TransactionServiceServer) {
	s.RegisterService(&_TransactionService_serviceDesc, srv)
}

func _TransactionService_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.TransactionService/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_TransactionsState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).TransactionsState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.TransactionService/TransactionsState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).TransactionsState(ctx, req.(*TransactionsStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_TransactionsStateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionsStateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).TransactionsStateStream(m, &transactionServiceTransactionsStateStreamServer{stream})
}

type TransactionService_TransactionsStateStreamServer interface {
	Send(*TransactionsStateStreamResponse) error
	grpc.ServerStream
}

type transactionServiceTransactionsStateStreamServer struct {
	grpc.ServerStream
}

func (x *transactionServiceTransactionsStateStreamServer) Send(m *TransactionsStateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TransactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v1.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _TransactionService_SubmitTransaction_Handler,
		},
		{
			MethodName: "TransactionsState",
			Handler:    _TransactionService_TransactionsState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransactionsStateStream",
			Handler:       _TransactionService_TransactionsStateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v1/tx.proto",
}
