// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: spacemesh/v1/activation.proto

package spacemeshv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActivationService_Get_FullMethodName     = "/spacemesh.v1.ActivationService/Get"
	ActivationService_Highest_FullMethodName = "/spacemesh.v1.ActivationService/Highest"
	ActivationService_Stream_FullMethodName  = "/spacemesh.v1.ActivationService/Stream"
)

// ActivationServiceClient is the client API for ActivationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivationServiceClient interface {
	// Get a single activation transaction
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Highest returns the atx id with the highest tick count.
	Highest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HighestResponse, error)
	Stream(ctx context.Context, in *ActivationStreamRequest, opts ...grpc.CallOption) (ActivationService_StreamClient, error)
}

type activationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivationServiceClient(cc grpc.ClientConnInterface) ActivationServiceClient {
	return &activationServiceClient{cc}
}

func (c *activationServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, ActivationService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activationServiceClient) Highest(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HighestResponse, error) {
	out := new(HighestResponse)
	err := c.cc.Invoke(ctx, ActivationService_Highest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activationServiceClient) Stream(ctx context.Context, in *ActivationStreamRequest, opts ...grpc.CallOption) (ActivationService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ActivationService_ServiceDesc.Streams[0], ActivationService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &activationServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActivationService_StreamClient interface {
	Recv() (*ActivationStreamResponse, error)
	grpc.ClientStream
}

type activationServiceStreamClient struct {
	grpc.ClientStream
}

func (x *activationServiceStreamClient) Recv() (*ActivationStreamResponse, error) {
	m := new(ActivationStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActivationServiceServer is the server API for ActivationService service.
// All implementations should embed UnimplementedActivationServiceServer
// for forward compatibility
type ActivationServiceServer interface {
	// Get a single activation transaction
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Highest returns the atx id with the highest tick count.
	Highest(context.Context, *emptypb.Empty) (*HighestResponse, error)
	Stream(*ActivationStreamRequest, ActivationService_StreamServer) error
}

// UnimplementedActivationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedActivationServiceServer struct {
}

func (UnimplementedActivationServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedActivationServiceServer) Highest(context.Context, *emptypb.Empty) (*HighestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Highest not implemented")
}
func (UnimplementedActivationServiceServer) Stream(*ActivationStreamRequest, ActivationService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

// UnsafeActivationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivationServiceServer will
// result in compilation errors.
type UnsafeActivationServiceServer interface {
	mustEmbedUnimplementedActivationServiceServer()
}

func RegisterActivationServiceServer(s grpc.ServiceRegistrar, srv ActivationServiceServer) {
	s.RegisterService(&ActivationService_ServiceDesc, srv)
}

func _ActivationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivationService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivationServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivationService_Highest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivationServiceServer).Highest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivationService_Highest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivationServiceServer).Highest(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivationService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActivationStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActivationServiceServer).Stream(m, &activationServiceStreamServer{stream})
}

type ActivationService_StreamServer interface {
	Send(*ActivationStreamResponse) error
	grpc.ServerStream
}

type activationServiceStreamServer struct {
	grpc.ServerStream
}

func (x *activationServiceStreamServer) Send(m *ActivationStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ActivationService_ServiceDesc is the grpc.ServiceDesc for ActivationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v1.ActivationService",
	HandlerType: (*ActivationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ActivationService_Get_Handler,
		},
		{
			MethodName: "Highest",
			Handler:    _ActivationService_Highest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _ActivationService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v1/activation.proto",
}
