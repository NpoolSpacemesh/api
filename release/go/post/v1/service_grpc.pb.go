// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: post/v1/service.proto

package postv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PostServiceOperator_Status_FullMethodName = "/post.v1.PostServiceOperator/Status"
)

// PostServiceOperatorClient is the client API for PostServiceOperator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceOperatorClient interface {
	Status(ctx context.Context, in *PostServiceStatusRequest, opts ...grpc.CallOption) (*PostServiceStatusResponse, error)
}

type postServiceOperatorClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceOperatorClient(cc grpc.ClientConnInterface) PostServiceOperatorClient {
	return &postServiceOperatorClient{cc}
}

func (c *postServiceOperatorClient) Status(ctx context.Context, in *PostServiceStatusRequest, opts ...grpc.CallOption) (*PostServiceStatusResponse, error) {
	out := new(PostServiceStatusResponse)
	err := c.cc.Invoke(ctx, PostServiceOperator_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceOperatorServer is the server API for PostServiceOperator service.
// All implementations should embed UnimplementedPostServiceOperatorServer
// for forward compatibility
type PostServiceOperatorServer interface {
	Status(context.Context, *PostServiceStatusRequest) (*PostServiceStatusResponse, error)
}

// UnimplementedPostServiceOperatorServer should be embedded to have forward compatible implementations.
type UnimplementedPostServiceOperatorServer struct {
}

func (UnimplementedPostServiceOperatorServer) Status(context.Context, *PostServiceStatusRequest) (*PostServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

// UnsafePostServiceOperatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceOperatorServer will
// result in compilation errors.
type UnsafePostServiceOperatorServer interface {
	mustEmbedUnimplementedPostServiceOperatorServer()
}

func RegisterPostServiceOperatorServer(s grpc.ServiceRegistrar, srv PostServiceOperatorServer) {
	s.RegisterService(&PostServiceOperator_ServiceDesc, srv)
}

func _PostServiceOperator_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceOperatorServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostServiceOperator_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceOperatorServer).Status(ctx, req.(*PostServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostServiceOperator_ServiceDesc is the grpc.ServiceDesc for PostServiceOperator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostServiceOperator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.v1.PostServiceOperator",
	HandlerType: (*PostServiceOperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _PostServiceOperator_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post/v1/service.proto",
}
